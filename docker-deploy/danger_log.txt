Database
We use MyBatis as our SQL mapper framework. Unlike some ORM framework, MyBatis does not map Java objects to database tables but Java methods to SQL statements. So it is vulnerable to SQL injection attack, especially for those fields whose type is String. This requires us to check the input data more carefully. For example, we need to make sure symbol name is a sequence of 1 or more alphanumeric characters.

Input Format
We need to process XML in this homework. There are some malformed request cases we need to take into consideration.
Firstly, the first line of input is a number representing the length of XML file. It is possible that it is a wrong number not compatible with the file length. In this way, the server will fail to read complete file.
Secondly, the input file might be malformed (invalid XML file). In this case, the server won’t generate the request object, and will discard it instead.
Finally, it is possible that the format looks good in general, but some single items are invalid. For example, <order sym="SYM" amount=“AMT”/> does not provide enough attribute. When the server detect the attribute missing, it will return an error massage.

Data Concurrency
We need to deal with read-modify-write cycles. One efficient approach we first thought about is  to implement an optimistic locking. We can add a field version in our tables and every time we update one row the version will be increased by one. Once the version of data to update does not match the data in database, the update will be rejected. This works for single line transactions but sometimes we need to put multiple lines into one transaction. So we have to rely on transactions of database to make sure data is always consistent.
